using Minesweeper.Core.Enums;
using Minesweeper.Core.Models;
using Minesweeper.Core;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Tests.GameProcessorTests.OpenTests
{
    internal class OpenTestsRectangularField
    {
        [TestFixture]
        internal class OpenTests
        {

            private GameSettings? _settings;
            private bool[,]? _field;
            private Minesweeper.Core.GameProcessor? _gameProcessor;
            private PointState[,]? _currentField;
            private int rowLenght = 5;
            private int columnLenght = 14;

            //Beginner
            [SetUp]
            public void SetUp()
            {
                //Setup before every test
                _settings = DifficultyManager.GetGameSettingsByDifficultylevel(DifficultyLevel.Beginner);

                _field = FieldGenerator.GetRandomField(rowLenght, columnLenght, _settings.Mines);

                _gameProcessor = new Minesweeper.Core.GameProcessor(_field);

                _currentField = _gameProcessor.GetCurrentField();
            }

            [TearDown]
            public void Postcondition()
            {
                _settings = DifficultyManager.GetGameSettingsByDifficultylevel(DifficultyLevel.Beginner);

                _field = FieldGenerator.GetRandomField(rowLenght, columnLenght, _settings.Mines); ;

                _gameProcessor = new Minesweeper.Core.GameProcessor(_field);

                _currentField = _gameProcessor.GetCurrentField();
            }

            //Naming pattern test convention
            //GivenModule_TestCaseName_ExpectedResultModule

            [Test]
            [TestCase(0, 0)]
            public void Open_ReturnGameStateObject_Equal(int x, int y)
            {
                Assert.IsInstanceOf<GameState>(_gameProcessor.Open(x, y));
            }

            //Test game state after win to throw exception
            //Talk with Serhii about unhanlded exception
            [Test]
            [TestCase(0, 0)]
            public void Open_PlayAfterWin_ThrowException(int x, int y)
            {
                int mines = 0;

                _field = FieldGenerator.GetRandomField(rowLenght, columnLenght, mines);

                _gameProcessor = new Minesweeper.Core.GameProcessor(_field);
                
                _gameProcessor.Open(x, y);

                Assert.Throws<InvalidOperationException>(() => _gameProcessor.Open(x, y));
            }

            [Test]
            [TestCase(0, 0)]
            public void Open_PlayAfterLose_ThrowException(int x, int y)
            {
                int mines = rowLenght * columnLenght;

                _field = FieldGenerator.GetRandomField(rowLenght, columnLenght, mines);

                _gameProcessor = new Minesweeper.Core.GameProcessor(_field);

                _gameProcessor.Open(x, y);

                Assert.Throws<InvalidOperationException>(() => _gameProcessor.Open(x, y));
            }

            [Test]
            [TestCase(0, 0)]
            public void Open_ReturnGameState_Lose(int x, int y)
            {

                int mines = rowLenght * columnLenght;

                _field = FieldGenerator.GetRandomField(rowLenght, columnLenght, mines);

                _gameProcessor = new Minesweeper.Core.GameProcessor(_field);
                GameState gameState = _gameProcessor.Open(x, y);

                Assert.AreEqual(gameState, GameState.Lose);
            }

            [Test]
            [TestCase(0, 0)]
            public void Open_ReturnGameState_Win(int x, int y)
            {
                int mines = 0;

                _field = FieldGenerator.GetRandomField(rowLenght, columnLenght, mines);

                _gameProcessor = new Minesweeper.Core.GameProcessor(_field);
                GameState gameState = _gameProcessor.Open(x, y);

                Assert.AreEqual(gameState, GameState.Win);
            }

            [Test]
            public void Open_ReturnGameState_WinOrLose([Values(0, 1, 2)] int difficultyLevel)
            {
                Random random = new Random();
                bool gameFinished = false;
                GameState gameState = GameState.Active;


                _settings = DifficultyManager.GetGameSettingsByDifficultylevel((DifficultyLevel)difficultyLevel);

                _field = FieldGenerator.GetRandomField(_settings.Width, _settings.Height, _settings.Mines);

                _gameProcessor = new Minesweeper.Core.GameProcessor(_field);

                while (gameState == GameState.Active)
                {
                    gameState = _gameProcessor.Open(random.Next(0, _settings.Width - 1), random.Next(0, _settings.Height - 1));
                    if (gameState != GameState.Active)
                    {
                        gameFinished = true;
                    }
                }

                Assert.AreEqual(gameFinished, true);
            }

            //To do
            [Test]
            public void Open_WithSameCoordinates_SameState([Values(0, 1, 2)] int difficultyLevel, [Values(0, 5)] int x, [Values(5, 0)] int y)
            {
                GameState expectedGameState = GameState.Active;
                GameState actualGameState;

                do
                {
                    _settings = DifficultyManager.GetGameSettingsByDifficultylevel((DifficultyLevel)difficultyLevel);
                    _field = FieldGenerator.GetRandomField(_settings.Width, _settings.Height, _settings.Mines);
                    _gameProcessor = new Minesweeper.Core.GameProcessor(_field);

                    actualGameState = _gameProcessor.Open(x, y);

                } while (actualGameState == GameState.Lose || actualGameState == GameState.Win);

                actualGameState = _gameProcessor.Open(x, y);

                Assert.AreEqual(expectedGameState, actualGameState);
            }
            
            //Doing
            [Test, Combinatorial]
            public void Open_EveryCell_WinLoseActive(
                [Values(0, 1, 2)] int difficultyLevel,
                [Values(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)] int row,
                [Values(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)] int column)
            {
                if(row < rowLenght && column < columnLenght)
                {
                    Assert.IsInstanceOf<GameState>(_gameProcessor.Open(row, column));                
                }
            }

        }
    }
}
