using Minesweeper.Core;
using Minesweeper.Core.Enums;
using Minesweeper.Core.Models;
using NUnit.Framework;

namespace Tests.Test_GameProcessor
{
    [TestFixture]
    internal class OpenTests
    {
        
        private GameSettings? _settings;
        private bool[,]? _field;
        private Minesweeper.Core.GameProcessor? _gameProcessor;
        private PointState[,]? _currentField;

        //Beginner
        [SetUp]
        public void SetUp()
        {
            //Setup before every test
            _settings = DifficultyManager.GetGameSettingsByDifficultylevel(DifficultyLevel.Beginner);

            _field = FieldGenerator.GetRandomField(_settings.Width, _settings.Height, _settings.Mines);

            _gameProcessor = new Minesweeper.Core.GameProcessor(_field);

            _currentField = _gameProcessor.GetCurrentField();
        }

        [TearDown]
        public void Postcondition()
        {
            _settings = DifficultyManager.GetGameSettingsByDifficultylevel(DifficultyLevel.Beginner);

            _field = FieldGenerator.GetRandomField(_settings.Width, _settings.Height, _settings.Mines);

            _gameProcessor = new Minesweeper.Core.GameProcessor(_field);

            _currentField = _gameProcessor.GetCurrentField();
        }

        
        [Test]
        [TestCase(0,0)]
        public void Open_ReturnGameStateObject(int x, int y)
        {
            Assert.IsInstanceOf<GameState>(_gameProcessor.Open(x, y));
        }

        [Test]
        [TestCase(5, 5, 0, 0)]
        public void Open_ReturnGameState_Lose(int width, int height, int x, int y)
        {
            
            int mines = width * height;

            _field = FieldGenerator.GetRandomField(width, height, mines);

            _gameProcessor = new Minesweeper.Core.GameProcessor(_field);
            GameState gameState =  _gameProcessor.Open(x, y);
            Assert.AreEqual(gameState, GameState.Lose);
        }

        [Test]
        [TestCase(5, 5, 0, 0 )]
        public void Open_ReturnGameState_Win(int width, int height, int x, int y)
        {
            int mines = 0;

            _field = FieldGenerator.GetRandomField(width, height, mines);

            _gameProcessor = new Minesweeper.Core.GameProcessor(_field);
            GameState gameState = _gameProcessor.Open(x, y);
            Assert.AreEqual(gameState, GameState.Win);
        }

        [Test]
        public void Open_ReturnGameState_Win_Or_Lose()
        {
            Random random = new Random();
            bool gameFinished = false;
            GameState gameState = GameState.Active;

            while (gameState == GameState.Active)
            {
                gameState = _gameProcessor.Open(random.Next(0, _settings.Width - 1), random.Next(0, _settings.Height - 1));
                if (gameState != GameState.Active)
                {
                    gameFinished = true;
                }
            }
            
            Assert.AreEqual(gameFinished, true);
        }

        [Test]
        public void Open_WithSame_Coordinatres()
        {

        }

        //Test game state after win to throw exception
    }
}