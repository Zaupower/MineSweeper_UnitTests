using Minesweeper.Core;
using Minesweeper.Core.Enums;
using Minesweeper.Core.Models;
using NUnit.Framework;

namespace Tests.Test_GameProcessor
{
    [TestFixture]
    internal class OpenTests
    {
        
        private GameSettings? _settings;
        private bool[,]? _field;
        private Minesweeper.Core.GameProcessor? _gameProcessor;
        private PointState[,]? _currentField;

        //Beginner
        [SetUp]
        public void SetUp()
        {
            //Setup before every test
            _settings = DifficultyManager.GetGameSettingsByDifficultylevel(DifficultyLevel.Beginner);

            _field = FieldGenerator.GetRandomField(_settings.Width, _settings.Height, _settings.Mines);

            _gameProcessor = new Minesweeper.Core.GameProcessor(_field);

            _currentField = _gameProcessor.GetCurrentField();
        }

        [TearDown]
        public void Postcondition()
        {
            _settings = DifficultyManager.GetGameSettingsByDifficultylevel(DifficultyLevel.Beginner);

            _field = FieldGenerator.GetRandomField(_settings.Width, _settings.Height, _settings.Mines);

            _gameProcessor = new Minesweeper.Core.GameProcessor(_field);

            _currentField = _gameProcessor.GetCurrentField();
        }

        
        //if (targetCell.IsOpen) return GameState obj type;
        [Test]
        [TestCase(0,0)]
        public void Open_ReturnGameStateObject(int x, int y)
        {
            Assert.IsInstanceOf<GameState>(_gameProcessor.Open(x, y));
        }

        //Test method open
        //To test
        //if (GameState != GameState.Active) throw exception?
        //if (targetCell.IsMine) GameState = GameState.Lose;
        //targetCell.MineNeighborsCount need to have the same value as the number of mines in the neighborhood, deixar para ultimo
        //if (openCount + mineCount == totalCount) GameState = GameState.Win;

        [Test]
        [TestCase(0, 0)]
        public void Open_ReturnGameState_Lose(int x, int y)
        {
            int width = 5, height = 5;
            int mines = width * height;

            _field = FieldGenerator.GetRandomField(width, height, mines);

            _gameProcessor = new Minesweeper.Core.GameProcessor(_field);
            GameState gameState =  _gameProcessor.Open(x, y);
            Assert.AreEqual(gameState, GameState.Lose);
        }

    }
}