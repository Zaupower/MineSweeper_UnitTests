using Minesweeper.Core;
using Minesweeper.Core.Enums;
using Minesweeper.Core.Models;
using NUnit.Framework;

namespace Tests.Test_GameProcessor
{
    [TestFixture]
    internal class OpenTests
    {
        private DifficultyLevel[] _difficultyLevels = 
            {
                DifficultyLevel.Beginner, DifficultyLevel.Intermediate,DifficultyLevel.Expert
            };
        private GameSettings? _settings;
        private bool[,]? _field;
        private Minesweeper.Core.GameProcessor? _gameProcessor;
        private PointState[,]? _currentField;

        [SetUp]
        public void SetUp()
        {
            //Setup before every test
            _settings = DifficultyManager.GetGameSettingsByDifficultylevel(DifficultyLevel.Beginner);

            _field = FieldGenerator.GetRandomField(_settings.Width, _settings.Height, _settings.Mines);

            _gameProcessor = new Minesweeper.Core.GameProcessor(_field);

            _currentField = _gameProcessor.GetCurrentField();
        }

        [TearDown]
        public void Postcondition()
        {
            _settings = DifficultyManager.GetGameSettingsByDifficultylevel(DifficultyLevel.Beginner);

            _field = FieldGenerator.GetRandomField(_settings.Width, _settings.Height, _settings.Mines);

            _gameProcessor = new Minesweeper.Core.GameProcessor(_field);

            _currentField = _gameProcessor.GetCurrentField();
        }

        //Test method open
        //To test
        //if (GameState != GameState.Active) throw exception?
        //if (targetCell.IsOpen) return GameState obj type;
        //if (targetCell.IsMine) GameState = GameState.Lose;
        //targetCell.MineNeighborsCount need to have the same value as the number of mines in the neighborhood, deixar para ultimo
        //if (openCount + mineCount == totalCount) GameState = GameState.Win;
        [Test]
        
        public void Open_ReturnGameStateObject()
        {
            for (int  i = 0; i< _difficultyLevels.Length - 1)
            {
                
            }
        }

    }
}