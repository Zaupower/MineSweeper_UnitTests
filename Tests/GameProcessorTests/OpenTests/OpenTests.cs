using Minesweeper.Core;
using Minesweeper.Core.Enums;
using Minesweeper.Core.Models;
using NUnit.Framework;

namespace Tests.GameProcessorTests.OpenTests
{
    [TestFixture]
    internal class OpenTests
    {

        private GameSettings? _settings;
        private bool[,]? _field;
        private Minesweeper.Core.GameProcessor? _gameProcessor;
        private PointState[,]? _currentField;

        [SetUp]
        public void SetUp()
        {
          
        }

        [TearDown]
        public void Postcondition()
        {
        }

        [Test]
        [TestCase(0, 0)]
        public void Open_ReturnGameStateObject_Equal(int x, int y)
        {
            _settings = DifficultyManager.GetGameSettingsByDifficultylevel(DifficultyLevel.Beginner);
            _field = FieldGenerator.GetRandomField(_settings.Width, _settings.Height, _settings.Mines);
            _gameProcessor = new Minesweeper.Core.GameProcessor(_field);
            _currentField = _gameProcessor.GetCurrentField();

            Assert.IsInstanceOf<GameState>(_gameProcessor.Open(x, y));
        }

        [Test]
        [TestCase(5, 5, 0, 0)]

        public void Open_PlayAfterWin_ThrowException(int width, int height, int x, int y)
        {
            int mines = 0;

            _field = FieldGenerator.GetRandomField(width, height, mines);
            _gameProcessor = new Minesweeper.Core.GameProcessor(_field);
            GameState gameState = _gameProcessor.Open(x, y);

            Assert.Throws<InvalidOperationException>(() => _gameProcessor.Open(x, y));
        }

        [Test]
        [TestCase(5, 5, 0, 0)]
        public void Open_PlayAfterLose_ThrowException(int width, int height, int x, int y)
        {

            int mines = width * height;

            _field = FieldGenerator.GetRandomField(width, height, mines);
            _gameProcessor = new Minesweeper.Core.GameProcessor(_field);
            GameState gameState = _gameProcessor.Open(x, y);

            Assert.Throws<InvalidOperationException>(() => _gameProcessor.Open(x, y));
        }

        [Test]
        [TestCase(5, 5, 0, 0)]
        public void Open_Lose_ReturnGameState(int width, int height, int x, int y)
        {

            int mines = width * height;

            _field = FieldGenerator.GetRandomField(width, height, mines);
            _gameProcessor = new Minesweeper.Core.GameProcessor(_field);
            GameState gameState = _gameProcessor.Open(x, y);

            Assert.AreEqual(gameState, GameState.Lose);
        }

        [Test]
        [TestCase(5, 5, 0, 0)]
        public void Open_ReturnGameState_Win(int width, int height, int x, int y)
        {
            int mines = 0;

            _field = FieldGenerator.GetRandomField(width, height, mines);
            _gameProcessor = new Minesweeper.Core.GameProcessor(_field);
            GameState gameState = _gameProcessor.Open(x, y);

            Assert.AreEqual(gameState, GameState.Win);
        }

        [Test]
        public void Open_ReturnGameState_WinOrLose([Values(0,1,2)] int difficultyLevel)
        {
            Random random = new Random();
            bool gameFinished = false;
            GameState gameState = GameState.Active;

            _settings = DifficultyManager.GetGameSettingsByDifficultylevel((DifficultyLevel)difficultyLevel);
            _field = FieldGenerator.GetRandomField(_settings.Width, _settings.Height, _settings.Mines);
            _gameProcessor = new Minesweeper.Core.GameProcessor(_field);

            while (gameState == GameState.Active)
            {
                gameState = _gameProcessor.Open(random.Next(0, _settings.Width - 1), random.Next(0, _settings.Height - 1));
                if (gameState != GameState.Active)
                {
                    gameFinished = true;
                }
            }

            Assert.AreEqual(gameFinished, true);
        }

        //To do
        [Test]
        public void Open_WithSameCoordinates_SameState([Values(0, 1, 2)] int difficultyLevel, [Values(0,5)] int x, [Values(5, 0)] int y)
        {
            GameState expectedGameState = GameState.Active;
            GameState actualGameState;

            do
            {
                _settings = DifficultyManager.GetGameSettingsByDifficultylevel((DifficultyLevel)difficultyLevel);
                _field = FieldGenerator.GetRandomField(_settings.Width, _settings.Height, _settings.Mines);
                _gameProcessor = new Minesweeper.Core.GameProcessor(_field);
                actualGameState = _gameProcessor.Open(x, y);

            } while (actualGameState == GameState.Lose || actualGameState == GameState.Win);
            
            actualGameState = _gameProcessor.Open(x, y);

            Assert.AreEqual(expectedGameState, actualGameState);
        }

        [Test, Combinatorial]
        public void Open_FirstCellAllPositions_WinLoseActive(
                [Values(0, 1, 2)] int difficultyLevel,
                [Values(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)] int row,
                [Values(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)] int column)
        {
            _settings = DifficultyManager.GetGameSettingsByDifficultylevel((DifficultyLevel)difficultyLevel);
            _field = FieldGenerator.GetRandomField(_settings.Width, _settings.Height, _settings.Mines);
            _gameProcessor = new Minesweeper.Core.GameProcessor(_field);

            if (row < _settings.Width && column < _settings.Height)
            {
                Assert.IsInstanceOf<GameState>(_gameProcessor.Open(row, column));
            }
        }
    }
}